/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*
ddtSchemes
{
    default CrankNicolson 0.5;
}

gradSchemes
{
    //default         leastSquares;
	default         Gauss linear;
    grad(p)         Gauss linear limited 0.5;
	//default cellMDLimited Gauss linear 0.5;
	//grad(U) cellMDLimited Gauss linear 0.5;
}

divSchemes
{
    default          none;
    div(phi,U)     	 Gauss linearUpwind grad(U);
	div(phi,k)       Gauss linearUpwind grad(k);
    div(phi,epsilon) Gauss linearUpwind grad(epsilon);
    div(phi,omega)   Gauss linearUpwind grad(omega);
 	div(div(phi,U))  Gauss linearUpwind grad(U);
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}


laplacianSchemes
{
    default         Gauss linear limited 0.777;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{ 
    default         limited 0.777; //corrected
}

oversetInterpolation
{
    method          inverseDistance;
    holeLayers          1;
    useLayer            1;
}

fluxRequired
{
    default         no;
    pcorr           ;
    p               ;
}

wallDist
{
    method meshWave;
}
*/
/*

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;
    div(phi,U)      Gauss upwind;

    div(phi,omega) bounded Gauss upwind;
    div(phi,k)       Gauss limitedLinear 1;

    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
    laplacian(diffusivity,cellDisplacement)  Gauss linear corrected;
   // laplacian(yPsi) <laplacian scheme>;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

oversetInterpolation
{
    // Faster but less accurate
    method              trackingInverseDistance;
    //searchBox           (-0.2 -0.2 -0.25)(0.2 0.02 0.25);
    searchBoxDivisions  2{(64 64 64)};
    allowInterpolatedDonors     false;
}

fluxRequired
{
    default         no;
    pcorr           ;
    p               ;
}

oversetInterpolationSuppressed
{
    grad(p);
    surfaceIntegrate(phiHbyA);
}


wallDist
{
    method meshWave;
}
*/


ddtSchemes
{
    default CrankNicolson 0.5;
}

gradSchemes
{
    //default         leastSquares;
	default         Gauss linear;
    grad(p)         Gauss linear limited 0.5;
	//default cellMDLimited Gauss linear 0.5;
	//grad(U) cellMDLimited Gauss linear 0.5;
}

divSchemes
{
    default          none;
    div(phi,U)     	 Gauss linearUpwind grad(U);
	div(phi,k)       Gauss linearUpwind grad(k);
    div(phi,epsilon) Gauss linearUpwind grad(epsilon);
    div(phi,omega)   Gauss linearUpwind grad(omega);
 	div(div(phi,U))  Gauss linearUpwind grad(U);
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}


laplacianSchemes
{
    default         Gauss linear limited 0.777;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{ 
    default         limited 0.777; //corrected
}

oversetInterpolation
{
    method          inverseDistance;
    holeLayers          1;
    useLayer            1;
}

fluxRequired
{
    default         no;
    pcorr           ;
    p               ;
}

wallDist
{
    method meshWave;
}
